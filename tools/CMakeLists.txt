cmake_minimum_required(VERSION 3.11)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "MinSizeRel" CACHE STRING "Choose the type of build, options are: Debug, Release, or MinSizeRel." FORCE)
    message(STATUS "CMAKE_BUILD_TYPE not set, defaulting to MinSizeRel.")
endif()

set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/cmake")

if(BUILD_VERSION)
  set(NUTTX_HOST_TOOLS_VERSION "0.0.0.${BUILD_VERSION}")
else()
  set(NUTTX_HOST_TOOLS_VERSION "0.0.0.0")
endif()

project(host_tools VERSION "${NUTTX_HOST_TOOLS_VERSION}" LANGUAGES C CXX)
message(STATUS "${PROJECT_NAME} ............. ${PROJECT_VERSION}")
message(STATUS "Generator .............. ${CMAKE_GENERATOR}")
message(STATUS "Build Type ............. ${CMAKE_BUILD_TYPE}")

#### Config variables ####
include(CheckFunctionExists)

check_function_exists(strtok_r HAVE_STRTOK_C)
if(HAVE_STRTOK_C)
  add_definitions(-DHAVE_STRTOK_C=1)
endif()

check_function_exists(getopt HAVE_GETOPT_C)
if(NOT HAVE_GETOPT_C)
  include(ExternalProject)

  # use gperf archive
  SET(GPERF_RELEASE 3.1)
  ExternalProject_Add(gperf_ext
      URL https://github.com/jwinarske/gperf/archive/cmake.zip
      URL_HASH "SHA256=2c3ff3ce41f4a97b6bbc432372d3cb738afcf7535705e7c2977c4f6af1c7ff19"
      UPDATE_COMMAND ""
      DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/gperf-${GPERF_RELEASE}
      BUILD_IN_SOURCE 1
      CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${CMAKE_SOURCE_DIR}/third_party/gperf-${GPERF_RELEASE}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_DEBUG_POSTFIX=d)
  include_directories(${CMAKE_SOURCE_DIR}/third_party/gperf-${GPERF_RELEASE}/include)
  link_directories(${CMAKE_SOURCE_DIR}/third_party/gperf-${GPERF_RELEASE}/lib/static)
  if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    link_libraries(gpd.lib)
  else()
    link_libraries(gp.lib)
  endif()
endif()

if(MSVC)
  include(ExternalProject)

  SET(DIRENT_RELEASE 1.23.2)
  ExternalProject_Add(dirent_ext
      URL https://github.com/tronkko/dirent/archive/${DIRENT_RELEASE}.zip
      URL_HASH "SHA256=4bcf07266f336bcd540fec5f75e90f027bd5081d3752f9ea5d408ef6ae30a897"
      UPDATE_COMMAND ""
      DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/dirent-${GPERF_RELEASE}
      BUILD_IN_SOURCE 1
      CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${CMAKE_SOURCE_DIR}/third_party/dirent-${DIRENT_RELEASE}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_DEBUG_POSTFIX=d
  )
  
  include_directories(
    ${CMAKE_SOURCE_DIR}/third_party
    ${CMAKE_SOURCE_DIR}/third_party/dirent-${DIRENT_RELEASE}/include
  )
  
  string(APPEND CMAKE_C_FLAGS " /MP")  # enable parallel builds
  add_definitions(
    -D_CONSOLE -D_MBCS
    -D_CRT_SECURE_NO_WARNINGS
    -DCONFIG_WINDOWS_NATIVE
    -DPATH_MAX=260
    -DNAME_MAX=260
    -Dstrdup=_strdup # supress deprecation warnings
  )

  list(APPEND SRC_DEPS third_party/asprintf.c)

  set(CMAKE_DEBUG_POSTFIX d)

endif()

if(CONFIG_ENDIAN_BIG)
  add_definitions(-DTGT_BIGENDIAN=1)
endif()

if (CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
  add_definitions(-D_GNU_SOURCE) # This shouldn't be defined in the c file
  string(APPEND CMAKE_C_FLAGS " -Wall -Wstrict-prototypes -Wshadow")
endif()

if(UNIX)
  if(CYGWIN)
    string(APPEND CMAKE_C_FLAGS " -DHOST_CYGWIN=1")
  endif()
endif()

# b16 - Fixed precision math conversion tool
add_executable(b16 b16.c)

# bdf-converter - Converts a BDF font to the NuttX font format
add_executable(bdf-converter bdf-converter.c)

# cmpconfig - Compare the contents of two configuration files
add_executable(cmpconfig cmpconfig.c cfgparser.c)

# configure - Instantiate a canned NuttX configuration
add_executable(configure configure.c cfgparser.c ${SRC_DEPS})

# kconfig2html - Create an HTML document describing the configuration options
#add_executable(kconfig2html kconfig2html.c ${SRC_DEPS})

# mkconfig - Convert a .config file into a C config.h file
add_executable(mkconfig mkconfig.c cfgdefine.c)

add_executable(mkdeps mkdeps.c csvparser.c)

# mksymtab - Convert a CSV file into a symbol table
add_executable(mksymtab mksymtab.c csvparser.c ${SRC_DEPS})

# mksyscall - Convert a CSV file into syscall stubs and proxies
add_executable(mksyscall mksyscall.c csvparser.c ${SRC_DEPS})

# mkversion - Convert a .version file into a C version.h file
add_executable(mkversion mkconfig.c cfgdefine.c)

# cnvwindeps - Convert dependences generated by a Windows native toolchain
# for use in a Cygwin/POSIX build environment
add_executable(cnvwindeps cnvwindeps.c)

# nxstyle - Check a file for compliance to NuttX coding style
add_executable(nxstyle nxstyle.c)

# initialconfig - Create a barebones .config file sufficient only for
# instantiating the symbolic links necesary to do a real configuration 
# from scratch.
add_executable(initialconfig initialconfig.c ${SRC_DEPS})

# logparser - Convert a git log to ChangeLog format.
add_executable(logparser logparser.c ${SRC_DEPS})

# gencromfs - Generate a CROMFS file system
add_executable(gencromfs gencromfs.c ${SRC_DEPS})
